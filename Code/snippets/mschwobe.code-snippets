{
  "Comment: Single /": {
    "prefix": "/",
    "description": "Comment: Single /",
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "body": [
      "$LINE_COMMENT -----------------------------------------------------------------------------",
      ""
    ]
  },
  "Comment: Double //": {
    "prefix": "/",
    "description": "Comment: Double //",
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "body": [
      "$LINE_COMMENT -----------------------------------------------------------------------------",
      "$LINE_COMMENT ${1:sectionName}",
      "$LINE_COMMENT -----------------------------------------------------------------------------",
      ""
    ]
  },
  "Comment: Single /*": {
    "prefix": "/",
    "description": "Comment: Single /*",
    "body": [
      "$BLOCK_COMMENT_START -------------------------------------------------------------------------- $BLOCK_COMMENT_END",
      ""
    ]
  },
  "Comment: Double //*": {
    "prefix": "/",
    "description": "Comment: Double //*",
    "body": [
      "$BLOCK_COMMENT_START -----------------------------------------------------------------------------",
      "$BLOCK_COMMENT_START ${1:sectionName}",
      "$BLOCK_COMMENT_START -------------------------------------------------------------------------- $BLOCK_COMMENT_END",
      ""
    ]
  },
  "Console: log": {
    "prefix": "conlog",
    "description": "Console: log",
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "body": ["console.log('ðŸŸ¢ ${1}', ${1});"]
  },
  "Console: log stringified": {
    "prefix": "constr",
    "description": "Console: log stringified",
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "body": ["console.log('ðŸŸ¢ ${1}', JSON.stringify(${1}${2:, null, 2}));"]
  },
  "CSS: debug with outline": {
    "prefix": "debugcss",
    "description": "CSS: debug with outline",
    "scope": "css,scss",
    "body": ["* { outline: 1px dotted hotpink; }", ""]
  },
  "Array of length N": {
    "prefix": "arrn",
    "description": "Array of length N",
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "body": ["[...Array(${1:n}).keys()]"]
  },
  "React: Pre component with stringified data": {
    "prefix": "prestr",
    "description": "React: Pre component with stringified data",
    "scope": "javascriptreact,typescriptreact",
    "body": [
      "<pre style={{ fontSize: \"10px\", padding: \"1em\", border: \"1px dashed\", overflow: \"auto\" }}>",
      "  {JSON.stringify(${1}, null, 2)}",
      "</pre>"
    ]
  },
  "React: Stitches CSS (.css.js,.css.ts)": {
    "prefix": "rcssfa",
    "description": "Creates a Stitches CSS module",
    "scope": "javascript,typescript",
    "body": [
      "import { css } from '../stitches.config';",
      "",
      "$LINE_COMMENT -----------------------------------------------------------------------------",
      "",
      "export const defaultVariants = {} as const;",
      "",
      "export const rootClassNames = css({",
      "  variants: {},",
      "",
      "  compoundVariants: [],",
      "",
      "  defaultVariants,",
      "});",
      "",
      "/* TODO: Write <${TM_FILENAME/([^.]+).*/$1/} /> styles. */",
      ""
    ]
  },
  "React: component with CSS modules (.js,.jsx)": {
    "prefix": "rcm",
    "description": "Creates a React component with CSS modules",
    "scope": "javascript,javascriptreact",
    "body": [
      "import cc from \"classcat\";",
      "import PropTypes from \"prop-types\";",
      "",
      "import styles from \"./${TM_FILENAME/([^.]+).*/$1/}.module.css\";",
      "",
      "$LINE_COMMENT -----------------------------------------------------------------------------",
      "",
      "export const ${TM_FILENAME/([^.]+).*/$1/}Props = {",
      "  /** Sets the content. */",
      "  children: PropTypes.node.isRequired,",
      "  /** Sets the `class` attribute. */",
      "  className: PropTypes.string,",
      "};",
      "",
      "export const default${TM_FILENAME/([^.]+).*/$1/}Props = {",
      "  className: undefined,",
      "};",
      "",
      "const ${TM_FILENAME/([^.]+).*/$1/} = ({ children, className, ...props }) => {",
      "  return (",
      "    <div {...props} className={cc([className, styles.root])}>",
      "      {children}",
      "    </div>",
      "  );",
      "};",
      "",
      "${TM_FILENAME/([^.]+).*/$1/}.propTypes = ${TM_FILENAME/([^.]+).*/$1/}Props;",
      "",
      "${TM_FILENAME/([^.]+).*/$1/}.defaultProps = default${TM_FILENAME/([^.]+).*/$1/}Props;",
      "",
      "export default ${TM_FILENAME/([^.]+).*/$1/};",
      ""
    ]
  },
  "React: component with CSS modules and forwardRef (.js,.jsx)": {
    "prefix": "rcmfr",
    "description": "Creates a React component with CSS modules and forwardRef",
    "scope": "javascript,javascriptreact",
    "body": [
      "import cc from \"classcat\";",
      "import PropTypes from \"prop-types\";",
      "import { forwardRef } from \"react\";",
      "",
      "import styles from \"./${TM_FILENAME/([^.]+).*/$1/}.module.css\";",
      "",
      "$LINE_COMMENT -----------------------------------------------------------------------------",
      "",
      "export const ${TM_FILENAME/([^.]+).*/$1/}Props = {",
      "  /** Sets the content. */",
      "  children: PropTypes.node.isRequired,",
      "  /** Sets the `class` attribute. */",
      "  className: PropTypes.string,",
      "};",
      "",
      "export const default${TM_FILENAME/([^.]+).*/$1/}Props = {",
      "  className: undefined,",
      "};",
      "",
      "const ${TM_FILENAME/([^.]+).*/$1/} = forwardRef(",
      "  ({ children, className, ...props }, forwardedRef) => {",
      "    return (",
      "      <button",
      "        {...props}",
      "        className={cc([className, styles.root])}",
      "        ref={forwardedRef}",
      "      >",
      "        {children}",
      "      </button>",
      "    );",
      "  }",
      ");",
      "",
      "${TM_FILENAME/([^.]+).*/$1/}.propTypes = ${TM_FILENAME/([^.]+).*/$1/}Props;",
      "",
      "${TM_FILENAME/([^.]+).*/$1/}.defaultProps = default${TM_FILENAME/([^.]+).*/$1/}Props;",
      "",
      "/* istanbul ignore next */",
      "if (process.env.NODE_ENV === \"development\") {",
      "  ${TM_FILENAME/([^.]+).*/$1/}.displayName = \"${TM_FILENAME/([^.]+).*/$1/}\";",
      "}",
      "",
      "export default ${TM_FILENAME/([^.]+).*/$1/};",
      ""
    ]
  },
  "React: component with CSS modules (.tsx)": {
    "prefix": "rcm",
    "description": "Creates a React component with CSS modules",
    "scope": "typescriptreact",
    "body": [
      "import cc from \"classcat\";",
      "",
      "$LINE_COMMENT -----------------------------------------------------------------------------",
      "",
      "export interface ${TM_FILENAME/([^.]+).*/$1/}Props",
      "  extends React.DetailedHTMLProps<",
      "    React.HTMLAttributes<HTMLDivElement>,",
      "    HTMLDivElement",
      "  > {",
      "  /** Sets the content. */",
      "  children: React.ReactNode;",
      "  /** Sets the `class` attribute. */",
      "  className?: string;",
      "}",
      "",
      "export default function ${TM_FILENAME/([^.]+).*/$1/}({",
      "  children,",
      "  className,",
      "  ...props",
      "}: ${TM_FILENAME/([^.]+).*/$1/}Props): JSX.Element {",
      "  return (",
      "    <div {...props} className={cc([className, '${TM_FILENAME/([^.]+).*/$1/}'])}>",
      "      {children}",
      "    </div>",
      "  );",
      "};",
      ""
    ]
  },
  "React: component with CSS modules and forwardRef (.tsx)": {
    "prefix": "rcmfr",
    "description": "Creates a React component with CSS modules and forwardRef",
    "scope": "typescriptreact",
    "body": [
      "import cc from \"classcat\";",
      "import { forwardRef } from \"react\";",
      "",
      "$LINE_COMMENT -----------------------------------------------------------------------------",
      "",
      "export interface ${TM_FILENAME/([^.]+).*/$1/}Props",
      "  extends React.DetailedHTMLProps<",
      "    React.ButtonHTMLAttributes<HTMLButtonElement>,",
      "    HTMLButtonElement",
      "  > {",
      "  /** Sets the content. */",
      "  children: React.ReactNode;",
      "  /** Sets the `class` attribute. */",
      "  className?: string;",
      "}",
      "",
      "const ${TM_FILENAME/([^.]+).*/$1/} = forwardRef<HTMLButtonElement, ${TM_FILENAME/([^.]+).*/$1/}Props>(",
      "  ({ children, className, ...props }, forwardedRef) => {",
      "    return (",
      "      <button",
      "        {...props}",
      "        className={cc([className, '${TM_FILENAME/([^.]+).*/$1/}'])}",
      "        ref={forwardedRef}",
      "      >",
      "        {children}",
      "      </button>",
      "    );",
      "  }",
      ");",
      "",
      "/* istanbul ignore next */",
      "if (process.env.NODE_ENV === \"development\") {",
      "  ${TM_FILENAME/([^.]+).*/$1/}.displayName = \"${TM_FILENAME/([^.]+).*/$1/}\";",
      "}",
      "",
      "export default ${TM_FILENAME/([^.]+).*/$1/};",
      ""
    ]
  },
  "React: Storybook story (.js,.jsx)": {
    "prefix": "rsb",
    "description": "React: Storybook story",
    "scope": "javascript,javascriptreact",
    "body": [
      "import ${TM_FILENAME/([^.]+).*/$1/} from './${TM_FILENAME/([^.]+).*/$1/}';",
      "",
      "$LINE_COMMENT -----------------------------------------------------------------------------",
      "",
      "export default {",
      "  title: 'Components/${TM_FILENAME/([^.]+).*/$1/}',",
      "  component: ${TM_FILENAME/([^.]+).*/$1/},",
      "};",
      "",
      "const Template = (args) => <${TM_FILENAME/([^.]+).*/$1/} {...args} />;",
      "",
      "export const Default = Template.bind({});",
      "Default.args = {",
      "  children: 'Example',",
      "};",
      "",
      "/* TODO: Write <${TM_FILENAME/([^.]+).*/$1/} /> stories. */",
      ""
    ]
  },
  "React: Storybook story (.tsx)": {
    "prefix": "rsb",
    "description": "React: Storybook story",
    "scope": "typescriptreact",
    "body": [
      "import ${TM_FILENAME/([^.]+).*/$1/} from \"./${TM_FILENAME/([^.]+).*/$1/}\";",
      "",
      "import type { ComponentMeta, ComponentStory } from \"@storybook/react\";",
      "",
      "$LINE_COMMENT -----------------------------------------------------------------------------",
      "",
      "export default {",
      "  component: ${TM_FILENAME/([^.]+).*/$1/},",
      "  title: \"Components/${TM_FILENAME/([^.]+).*/$1/}\",",
      "} as ComponentMeta<typeof ${TM_FILENAME/([^.]+).*/$1/}>;",
      "",
      "const Template: ComponentStory<typeof ${TM_FILENAME/([^.]+).*/$1/}> = (args) => (",
      "  <${TM_FILENAME/([^.]+).*/$1/} {...args} />",
      ");",
      "",
      "export const Default = Template.bind({});",
      "Default.args = {",
      "  children: \"Example\",",
      "};",
      "",
      "/* TODO: Write <${TM_FILENAME/([^.]+).*/$1/} /> stories. */",
      ""
    ]
  },
  "Jest: test": {
    "prefix": "jt",
    "description": "Jest: test",
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "body": [
      "test('Should', () => {",
      "  expect(${1:provided}).toEqual(${0:expected});",
      "});"
    ]
  },
  "Jest: describe": {
    "prefix": "jd",
    "description": "Jest: describe",
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "body": ["describe('${1:moduleName}', () => {", "  ${0}", "});"]
  },
  "Jest: describe test": {
    "prefix": "jdt",
    "description": "Jest: describe and test",
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "body": [
      "import { render, screen } from '@testing-library/react';",
      "",
      "import ${TM_FILENAME/([^.]+).*/$1/} from './${TM_FILENAME/([^.]+).*/$1/}';",
      "",
      "$LINE_COMMENT -----------------------------------------------------------------------------",
      "",
      "describe('${TM_FILENAME/([^.]+).*/$1/}', () => {",
      "  test('should render', () => {",
      "    render(<${TM_FILENAME/([^.]+).*/$1/} data-testid=\"${TM_FILENAME/([^.]+).*/$1/}\">Example</${TM_FILENAME/([^.]+).*/$1/}>);",
      "    expect(screen.getByTestId('${TM_FILENAME/([^.]+).*/$1/}')).toBeInTheDocument();",
      "  });",
      "});",
      "",
      "/* TODO: Write <${TM_FILENAME/([^.]+).*/$1/} /> tests. */",
      ""
    ]
  }
}
